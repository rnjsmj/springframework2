package com.kh.spring.notice.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.ibatis.session.RowBounds;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.kh.spring.common.model.template.PageTemplate;
import com.kh.spring.common.model.vo.PageInfo;
import com.kh.spring.notice.model.service.NoticeService;
import com.kh.spring.notice.model.vo.Notice;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequiredArgsConstructor
@Slf4j
public class NoticeController {
		
	private final NoticeService noticeService;
	
	/* 기본 전체 목록 조회
	@GetMapping("noticelist")
	public String forwarding(Model model) {
		
		List<Notice> noticeList = noticeService.findAll();
		model.addAttribute("list", noticeList);
		
		log.info("공지사항 행 개수 : {}", noticeList.size());
		log.info("공지사항 : {}", noticeList);
		
		return "notice/list";
	}*/
	
	//페이징 기능 추가
	@GetMapping("noticelist")
	public String forwarding(@RequestParam(value="page", defaultValue="1") int page, Model model) {
		
		//pageInfo 클래스 객체 생성
		int listCount = noticeService.noticeCount();
		int currentPage = page;
		int pageLimit = 5;
		int boardLimit = 5;
		//생성된 PageInfo 객체를 통해 현재 보여줄 레코드와, 최대 페이지를 지정하여 화면에 출력할 수 있음
		PageInfo pi = PageTemplate.getPageInfo(listCount, currentPage, pageLimit, boardLimit);
		
		//RowBounds 객체 생성 (offset, limit)
		RowBounds rowBounds = new RowBounds((currentPage - 1) * boardLimit , boardLimit);
		List<Notice> noticeList = noticeService.findAll(rowBounds);
		
		model.addAttribute("pageInfo", pi);
		model.addAttribute("list", noticeList);
		
		
		return "notice/list";
	}
	
	
	// 글 작성 페이지 이동
	@GetMapping("noticeForm")
	public String noticeForm(HttpSession session, Model model) {
		
		if(!session.getAttribute("loginUser").equals("admin")) {
			return "redirect:/";
		}
		
		return "notice/insertForm";
	}
	
	//공지사항 insert
	@PostMapping("noticeInsert")
	public String noticeInsert(Notice notice) {
		
		if(noticeService.insert(notice) > 0) {
			
			return "redirect:/noticeList";
		} else {
			
			return "common/errorPage";
		}
		
		
		
	}
}
